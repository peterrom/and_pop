#!/bin/bash

# This is free and unencumbered software released into the public domain.
#
# Anyone is free to copy, modify, publish, use, compile, sell, or
# distribute this software, either in source code form or as a compiled
# binary, for any purpose, commercial or non-commercial, and by any
# means.
#
# In jurisdictions that recognize copyright laws, the author or authors
# of this software dedicate any and all copyright interest in the
# software to the public domain. We make this dedication for the benefit
# of the public at large and to the detriment of our heirs and
# successors. We intend this dedication to be an overt act of
# relinquishment in perpetuity of all present and future rights to this
# software under copyright law.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# For more information, please refer to <http://unlicense.org>

set -e
set -u
set -o pipefail

_ap_color_id() {
    local name=${1}

    case ${name} in
        red)
            printf 1
            ;;
        green)
            printf 2
            ;;
        *)
            exit 1
            ;;
    esac
}

ap_highlight() {
    local color=${1}
    local string=${2}

    printf "$(tput setb $(_ap_color_id ${color}))%s$(tput sgr0)" "${string}"
}

ap_msg() {
    local msg=${1}
    printf '%s\n' ${msg} | sed "s/^/$(ap_highlight green " ") /"
}

ap_err() {
    local msg=${1}

    # Print MSG as an error message to stderr.

    printf '\nerror: %s\n' \
        "${msg}"           \
        1>&2
}

ap_opt_parse() {
    # Parse command line options with descriptions.
    #
    # * Arguments
    #
    # Arguments to ap_opt_parse are "OPTION VARNAME DESCRIPTION"
    # triplets followed by "--" and the options to be parsed
    # (typically "$@").
    #
    # OPTION can either be a single letter for a boolean flag or a
    # letter followed by a colon for an option that takes a string
    # argument. VARNAME is the associated variable name and
    # DESCRIPTION the help text, i.e.
    #
    #     main() {
    #         local opt_flag opt_string
    #         ap_opt_parse                              \
    #             "f"  opt_flag   "An optional flag."   \
    #             "s:" opt_string "An optional string." \
    #             -- "$@"
    #    }
    #
    #    main "$@"
    #
    # will parse the command line options.
    #
    # In this example, ~opt_flag~ will be set to "true" if "-f" was
    # passed as an option, "false" otherwise. ~opt_string~ will be set
    # to the argument passed to the "-s" option. If the "-s" option is
    # not passed to the script it will be left unset.
    #
    # * Positional arguments
    #
    # After options are parsed the OPTIND variable will be set to the
    # index of the first positional argument. To add information in
    # the usage string about positional arguments, simply set the
    # variable AP_OPT_USAGE to that info, i.e.
    #
    #     AP_OPT_USAGE="<pos arg 1> <pos arg 2>"
    #     ap_opt_parse -- "$@"
    #     # ${OPTIND} points to first positional argument...

    local show_usage

    _ap_opt_parse                           \
        "h" show_usage "Display this help." \
        "$@"

    if ${show_usage}; then
        printf "${AP_OPT_USAGE}"
        exit 0
    fi
}

_ap_opt_parse() {
    # getopts option string
    local optstr=":"

    # option to variable map
    declare -A var_for

    # usage/help text
    printf -v AP_OPT_USAGE \
        "Usage: ${0} [OPTION]... ${AP_OPT_USAGE:-""}\n\nOptions:\n"

    # map remaining options to variables defined above
    while [[ ${1} != '--' ]]
    do
        optstr+="${1}"

        [[ ${#1} -eq 1 ]] && \
            eval "${2}=false"

        var_for[${1:0:1}]=${2}

        local optusage
        printf -v optusage '  -%-8s%s\n'  \
            "$(sed 's/:/ arg/' <<< ${1})" \
            "${3}"

        AP_OPT_USAGE+=${optusage}

        shift 3
    done

    # shift away the '--'
    shift

    local arg
    while getopts ${optstr} arg
    do
        case ${arg} in
            ':')
                ap_err "No argument given to option \"${OPTARG}\"!"
                return 1
                ;;
            '?')
                ap_err "Invalid option \"${OPTARG}\"!"
                return 1
                ;;
        esac

        eval "${var_for[${arg}]}=\"${OPTARG-true}\""
        unset OPTARG
    done
}
